// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "pigeon.hpp"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

Native2FlutterCodecSerializer::Native2FlutterCodecSerializer() {}

/* Generated class from Pigeon that represents Flutter messages that can be called from C++. */
Native2Flutter::Native2Flutter(flutter::BinaryMessenger *binary_messenger)
{
  this->binary_messenger_ = binary_messenger;
}

const flutter::StandardMessageCodec &Native2Flutter::GetCodec()
{
  return flutter::StandardMessageCodec::GetInstance(&Native2FlutterCodecSerializer::GetInstance());
}

void Native2Flutter::onClick(bool forward_arg, std::function<void(void)> &&callback)
{
  auto channel = std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
      binary_messenger_, "dev.flutter.pigeon.Native2Flutter.onClick", &GetCodec());
  channel->Send(flutter::EncodableList{flutter::EncodableValue(forward_arg)}, [callback](const uint8_t *reply, size_t reply_size)
                { callback(); });
}
