// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_PIGEON_H_
#define PIGEON_PIGEON_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>


/* Generated class from Pigeon. */

class FlutterError {
 public:
  FlutterError(const std::string& code)
    : code_(code) {}
  FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) { new(&v_) T(rhs); }
  ErrorOr(const T&& rhs) { v_ = std::move(rhs); }
  ErrorOr(const FlutterError& rhs) {
    new(&v_) FlutterError(rhs);
  }
  ErrorOr(const FlutterError&& rhs) { v_ = std::move(rhs); }

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class Native2Flutter;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};

class Native2FlutterCodecSerializer : public flutter::StandardCodecSerializer {
 public:

  inline static Native2FlutterCodecSerializer& GetInstance() {
    static Native2FlutterCodecSerializer sInstance;
    return sInstance;
  }

  Native2FlutterCodecSerializer();

};

/* Generated class from Pigeon that represents Flutter messages that can be called from C++. */
class Native2Flutter {
 private:
  flutter::BinaryMessenger* binary_messenger_;

 public:
  Native2Flutter(flutter::BinaryMessenger* binary_messenger);
  static const flutter::StandardMessageCodec& GetCodec();
  void onClick(bool forward_arg, std::function<void(void)>&& callback);

};
#endif  // PIGEON_PIGEON_H_
